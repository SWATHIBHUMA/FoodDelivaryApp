/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2024-01-17 12:55:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Objects;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import com.foodDelivaryApp.model.Menu;
import com.foodDelivaryApp.model.User;
import com.foodDelivaryApp.model.CartItem;
import com.foodDelivaryApp.model.Cart;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.ArrayList;

public final class checkout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Objects");
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("com.foodDelivaryApp.model.User");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.foodDelivaryApp.model.CartItem");
    _jspx_imports_classes.add("javax.servlet.ServletException");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletResponse");
    _jspx_imports_classes.add("com.foodDelivaryApp.model.Menu");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.foodDelivaryApp.model.Cart");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Checkout</title>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/checkout.css\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1 class=\"head\">Your Cart Items</h1>\r\n");
      out.write("    	");
int restaurantId=0; 
      out.write("\r\n");
      out.write("	    <div id=\"item-list\">\r\n");
      out.write("	    		\r\n");
      out.write("	            ");

	            User user = (User)session.getAttribute("user");
	            Cart cart = (Cart)session.getAttribute("cart");	            
	            if (cart != null && !cart.getItems().isEmpty()) {
      out.write("\r\n");
      out.write("	            \r\n");
      out.write("	            \r\n");
      out.write("	                ");
for (CartItem cartItem : cart.getItems().values()) {
      out.write("\r\n");
      out.write("	                ");
 
			            if (restaurantId == 0) {
			                restaurantId = cartItem.getRestaurentId();
			            }
            		
	                System.out.println("resId in checkout: "+restaurantId);
      out.write("\r\n");
      out.write("		                    <div class=\"menu-item\">\r\n");
      out.write("								<div class=\"item-details\">\r\n");
      out.write("				                    <p>");
      out.print( cartItem.getName() );
      out.write("</p>\r\n");
      out.write("				                    <p>Price: ");
      out.print( cartItem.getPrice() );
      out.write("</p>\r\n");
      out.write("			                    </div>\r\n");
      out.write("			                    <div class=\"btn-inc-dec\">\r\n");
      out.write("			                        \r\n");
      out.write("									<form action=\"cart\" method=\"POST\">\r\n");
      out.write("										<input type=\"hidden\" name=\"itemId\" value=\"");
      out.print( cartItem.getItemId() );
      out.write("\">\r\n");
      out.write("										<label>Quantity: <input type=\"number\" name=\"qty\" value=\"");
      out.print(cartItem.getQuantity() );
      out.write("\" min=\"1\"></label>\r\n");
      out.write("										<input type=\"submit\" name=\"action\" value=\"update\" class=\"dlt-btn\">\r\n");
      out.write("									</form>\r\n");
      out.write("\r\n");
      out.write("									\r\n");
      out.write("								</div>\r\n");
      out.write("							\r\n");
      out.write("			                    <div class=\"dlt-btn\">\r\n");
      out.write("			                    	<form action=\"cart\" method=\"POST\">\r\n");
      out.write("				                    	<input type=\"hidden\" name=\"action\" value=\"delete\">\r\n");
      out.write("				                    	<input type=\"hidden\" name=\"itemId\" value=\"");
      out.print( cartItem.getItemId() );
      out.write("\">\r\n");
      out.write("				                    	<button class=\"dlt-btn\">Delete</button>\r\n");
      out.write("			                    	</form>\r\n");
      out.write("			                    </div>\r\n");
      out.write("		                    </div>\r\n");
      out.write("\r\n");
      out.write("	            ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("	            ");
} else { 
      out.write("\r\n");
      out.write("	                <p>No items in the cart</p>\r\n");
      out.write("	            ");
 } 
      out.write("\r\n");
      out.write("	            \r\n");
      out.write("	           		<div class=\"btns\">\r\n");
      out.write("					    <a href=\"Menus?restaurantId=");
      out.print( session.getAttribute("restaurentId") );
      out.write("\" class=\"add-more-btn\">Add More Items</a>\r\n");
      out.write("					    <form id=\"orderForm\" action=\"OrderServlet\" method=\"POST\" onsubmit=\"return calculateTotalAmount(event)\">\r\n");
      out.write("						    <input type=\"hidden\" id=\"totalAmountInput\" name=\"totalAmount\" value=\"0\">\r\n");
      out.write("						    <button type=\"submit\" class=\"proceed-btn\">Proceed to order</button>\r\n");
      out.write("						    <input type=\"hidden\" name=\"restaurantId\" value=\"");
      out.print( restaurantId );
      out.write("\">\r\n");
      out.write("						</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("	    	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    function calculateTotalAmount(event) {\r\n");
      out.write("        console.log(\"Js Executing\");\r\n");
      out.write("\r\n");
      out.write("        var quantityInputs = document.querySelectorAll('.btn-inc-dec input[name=\"qty\"]');\r\n");
      out.write("        var itemDetails = document.querySelectorAll('.menu-item .item-details'); \r\n");
      out.write("\r\n");
      out.write("        var totalAmount = 0;\r\n");
      out.write("\r\n");
      out.write("        for (var i = 0; i < quantityInputs.length; i++) {\r\n");
      out.write("            console.log(\"Entering loop iteration: \" + i);\r\n");
      out.write("\r\n");
      out.write("            var quantity = parseInt(quantityInputs[i].value);\r\n");
      out.write("\r\n");
      out.write("            if (itemDetails[i]) {\r\n");
      out.write("                console.log(\"itemDetails[\" + i + \"] exists\");\r\n");
      out.write("\r\n");
      out.write("                var itemNameElement = itemDetails[i].querySelector('p:nth-child(1)');\r\n");
      out.write("                var priceElement = itemDetails[i].querySelector('p:nth-child(2)');\r\n");
      out.write("\r\n");
      out.write("                if (itemNameElement && priceElement) {\r\n");
      out.write("                    console.log(\"itemNameElement and priceElement exist\");\r\n");
      out.write("\r\n");
      out.write("                    var itemName = itemNameElement.textContent.trim();\r\n");
      out.write("                    var priceText = priceElement.textContent.trim(); \r\n");
      out.write("                    var price = parseFloat(priceText.split(\":\")[1].trim());\r\n");
      out.write("                    console.log(\"price: \" + price);\r\n");
      out.write("\r\n");
      out.write("                    totalAmount += quantity * price;\r\n");
      out.write("                } else {\r\n");
      out.write("                    console.log(\"itemNameElement or priceElement is null\");\r\n");
      out.write("                }\r\n");
      out.write("            } else {\r\n");
      out.write("                console.log(\"itemDetails[\" + i + \"] is undefined\");\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        console.log(\"Total Amount: \" + totalAmount);\r\n");
      out.write("        document.getElementById(\"totalAmountInput\").value = totalAmount.toFixed(2);\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
