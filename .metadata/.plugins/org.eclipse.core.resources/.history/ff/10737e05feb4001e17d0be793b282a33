package com.foodDelivaryApp.Utilities;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.spec.KeySpec;
import java.security.SecureRandom;
import java.util.Base64;

public class AESPasswordHashing {

    private static final String ALGORITHM = "AES/CBC/PKCS5Padding";
    private static final int KEY_SIZE = 256;
    private static final int ITERATION_COUNT = 65536;
    private static final int SALT_SIZE = 16;

    public static String hashPassword(String password) {
        try {
            // Generate a random salt
            SecureRandom secureRandom = new SecureRandom();
            byte[] salt = new byte[SALT_SIZE];
            secureRandom.nextBytes(salt);

            // Derive a key using PBKDF2
            KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_SIZE);
            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

            // Encrypt the salt using AES
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedSalt = cipher.doFinal(salt);

            // Combine the encrypted salt and the original salt
            byte[] combinedSalt = new byte[encryptedSalt.length + salt.length];
            System.arraycopy(encryptedSalt, 0, combinedSalt, 0, encryptedSalt.length);
            System.arraycopy(salt, 0, combinedSalt, encryptedSalt.length, salt.length);

            // Encode the combined salt to Base64
            return Base64.getEncoder().encodeToString(combinedSalt);
        } catch (Exception e) {
            e.printStackTrace(); // Handle the exception according to your application's needs
            return null;
        }
    }

    public static boolean verifyPassword(String hashedPassword, String inputPassword) {
        try {
            // Decode the Base64-encoded salt
            byte[] combinedSalt = Base64.getDecoder().decode(hashedPassword);

            // Extract the encrypted salt and the original salt
            byte[] encryptedSalt = new byte[KEY_SIZE / 8];
            byte[] salt = new byte[SALT_SIZE];
            System.arraycopy(combinedSalt, 0, encryptedSalt, 0, KEY_SIZE / 8);
            System.arraycopy(combinedSalt, KEY_SIZE / 8, salt, 0, SALT_SIZE);

            // Derive the key using PBKDF2
            KeySpec keySpec = new PBEKeySpec(inputPassword.toCharArray(), salt, ITERATION_COUNT, KEY_SIZE);
            SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

            // Decrypt the salt using AES
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decryptedSalt = cipher.doFinal(encryptedSalt);

            // Check if the decrypted salt matches the original salt
            return MessageDigest.isEqual(salt, decryptedSalt);
        } catch (Exception e) {
            e.printStackTrace(); // Handle the exception according to your application's needs
            return false;
        }
    }

    public static void main(String[] args) {
        // Example usage
        String password = "securePassword123";
        String hashedPassword = hashPassword(password);

        // Store hashedPassword in the database

        // Later, when verifying the password
        String inputPassword = "securePassword123";
        boolean isPasswordValid = verifyPassword(hashedPassword, inputPassword);

        if (isPasswordValid) {
            System.out.println("Password is valid");
        } else {
            System.out.println("Password is not valid");
        }
    }
}

