package com.foodDelivaryApp.servlets;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.foodDelivaryApp.daoImpl.OrderDaoImpl;
import com.foodDelivaryApp.model.Order;
import com.foodDelivaryApp.model.User;

@WebServlet("/OrderConfirmationServlet")
public class OrderConfirmationServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            // User not logged in, redirect to login page
            response.sendRedirect("login.jsp?message=Please sign in or sign up to place an order");
            return;
        }

        // Get order details from the form
        int totalAmount = Integer.parseInt(request.getParameter("totalAmount"));
        String address = request.getParameter("address");
        String paymentMethod = request.getParameter("paymentMethod");
        int restaurantId = Integer.parseInt(request.getParameter("restaurantId"));
//
//        // Get other required details (you may adjust this based on your system)
        int userId = user.getUserId();
        String orderStatus = "Pending";
//
        // Get the current date and time
        LocalDateTime orderDate = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedOrderDate = orderDate.format(formatter);
//
//        // Create an Order object
        Order order = new Order(1,userId, restaurantId, totalAmount, orderStatus, paymentMethod);

        // Save the order to the database using OrderDao
        OrderDaoImpl orderDao = new OrderDaoImpl();
        orderDao.addOrder(order);

        // You can add more logic here, such as sending a confirmation email, etc.

        // Redirect to a confirmation page or display a confirmation message
//        else {
//        	
//        	
        session.setAttribute("orderId", 1);
        session.setAttribute("totalAmount", totalAmount);
        session.setAttribute("userId", userId);
        session.setAttribute("paymentStatus", "Pending");
        response.sendRedirect("orderConfirmation.jsp");        	
//        }
    }
}
